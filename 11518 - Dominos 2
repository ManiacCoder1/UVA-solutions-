		//In the Name of Allah, the Most Beneficent, the Most Merciful.
//Author: M.A. Jobayed Hossain Asif.
#include<bits/stdc++.h>
using namespace std;
#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define MOD 1000000007
#define MOD1 998244353
#define INF 1e18
#define ln "\n"
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define ff first
#define ss second
#define PI 3.141592653589793238462
#define set_bits __builtin_popcountll
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define db debug
#define EPS 1e-9
#define MAX 10005
typedef long long ll;
typedef unsigned long long ull;
typedef long double lld;
#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x <<" "; _print(x); cerr << endl;
#else
#define debug(x)
#endif
bool isEqual(double a, double b) { return abs(a-b) < EPS; }
bool isGreater( double a, double b) { return a>=b + EPS; }
bool isGreaterOrEqual( double a , double b ) { return a > b - EPS; }
void _print(ll t) {cerr << t;}
void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(lld t) {cerr << t;}
void _print(double t) {cerr << t;}
void _print(ull t) {cerr << t;}
template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.ff); cerr << ","; _print(p.ss); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
vector<ll> edges[10005];
bool visited[10005];
int cnt;
// it is a simple dfs problem.
// in this problem, we have to be careful about clearing the vector 'edges' and the array 'visited';
void dfs(ll curr){
	visited[curr] = 1;
	cnt++;
	for(int i = 0; i < edges[curr].size(); i++){
		int x = edges[curr][i];
		if(visited[x] == 0) dfs(x);
	}

}
void solve(){
	int n,m,l;
	cin >> n >> m >> l;

	for( int i = 0; i < m; i++){
		int x , y;
		cin >> x >> y;
		edges[x].pb(y);
		//edges[y].pb(x);
	}
	for(int i = 0; i < l; i++){
		int z;
		cin >> z;
		if( visited[z] == 0)  dfs(z);
	}
    cout<<cnt<<ln;
    cnt = 0;
    for(int i = 1; i <= n; i++){
    	edges[i].clear();
    	
    }
    memset(visited , 0 , sizeof(visited));
    
    
    
	
  
   
 
}
 
int main() {
    fastio();
#ifndef ONLINE_JUDGE
    freopen("input1.txt", "r", stdin);
     freopen("output1.txt", "w", stdout);
    freopen("error1.txt", "w", stderr);
#endif
    ll t ;
    cin >> t;
    for(int it=1;it<=t;it++) {
 
        solve();
    }
    return 0;
}
//https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=2513
